#!/usr/bin/env python2
# -*- coding: utf-8 -*-
from __future__ import print_function

import argparse
parser = argparse.ArgumentParser(description='Generate a pseudorandom strings.')
parser.add_argument('-n', '--length', type=int, default=40, help='Length of a produced string.')
parser.add_argument('-r', '--rows', type=int, default=10, help='Rows of passwords to produce.')
parser.add_argument('-s', '--simple', action='store_true', help='Use only letters/numbers.')
parser.add_argument('-1', '--one', action='store_true', help='Output just one generated password.')
argz = parser.parse_args()

import itertools as it, operator as op, functools as ft
import os, sys, string

def get_terminal_size():
	def ioctl_GWINSZ(fd):
		try:
			import fcntl, termios, struct
			cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
		except: return
		return cr
	cr = ioctl_GWINSZ(0) or ioctl_GWINSZ(1) or ioctl_GWINSZ(2)
	if not cr:
		try:
			fd = os.open(os.ctermid(), os.O_RDONLY)
			cr = ioctl_GWINSZ(fd)
			os.close(fd)
		except: pass
	if not cr: cr = 0, 0
	return int(cr[1]), int(cr[0])

chr_range = bytes(string.ascii_letters + string.digits)
if not argz.simple:
	chr_range += bytes( string.punctuation.replace("'", '')
		.replace('"', '').replace('`', '').replace('\\', '').replace('!', '').replace('$', '') )

def src():
	with open('/dev/urandom', 'rb') as src:
		while True: yield src.read(1)
src = it.ifilter(ft.partial(op.contains, chr_range), src())
getpass = lambda n: bytearray(next(src) for i in xrange(n))

if argz.one:
	print(getpass(argz.length))

else:
	(w, h), pad = get_terminal_size(), 3
	for i in xrange(argz.rows):
		row_left = w
		while True:
			print(getpass(argz.length), end='')
			row_left -= argz.length
			if not row_left or row_left < (pad + argz.length): break
			print(' '*pad, end='')
			row_left -= pad
		print()
