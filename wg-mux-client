#!/usr/bin/env python3

import os, sys, io, logging, contextlib, asyncio, socket, signal
import math, hashlib, secrets, struct, base64, ipaddress, textwrap
import pathlib as pl, subprocess as sp


class WGMuxConfig:
	auth_secret = 'set this via cli option!'
	mux_attempts = 6
	mux_port = 8739
	mux_timeout = 10.0
	wg_iface = 'wg'
	wg_keepalive = 10
	key_source_ssh = '~/.ssh/id_ed25519'
	key_pbkdf2_rounds = 100 # for ed25519_sk, done on every run


err_fmt = lambda err: '[{}] {}'.format(err.__class__.__name__, err)

class LogMessage:
	def __init__(self, fmt, a, k): self.fmt, self.a, self.k = fmt, a, k
	def __str__(self): return self.fmt.format(*self.a, **self.k) if self.a or self.k else self.fmt

class LogStyleAdapter(logging.LoggerAdapter):
	def __init__(self, logger, extra=None):
		super(LogStyleAdapter, self).__init__(logger, extra or {})
	def log(self, level, msg, *args, **kws):
		if not self.isEnabledFor(level): return
		log_kws = {} if 'exc_info' not in kws else dict(exc_info=kws.pop('exc_info'))
		msg, kws = self.process(msg, kws)
		self.logger._log(level, LogMessage(msg, args, kws), (), **log_kws)

get_logger = lambda name: LogStyleAdapter(logging.getLogger(name))
log = get_logger('mux-client.main')


b64_encode = lambda s: base64.standard_b64encode(s).decode()
b64_decode = lambda s: ( base64.urlsafe_b64decode
	if '-' in s or '_' in s else base64.standard_b64decode )(s)
to_bytes = lambda s: s if isinstance(s, bytes) else str(s).encode()
dedent = lambda text: (textwrap.dedent(text).strip('\n') + '\n').replace('\t', '  ')

def str_part(s, sep, default=None):
	'Examples: str_part("user@host", "<@", "root"), str_part("host:port", ":>")'
	c = sep.strip('<>')
	if sep.strip(c) == '<': return (default, s) if c not in s else s.split(c, 1)
	else: return (s, default) if c not in s else s.rsplit(c, 1)

def sockopt_resolve(prefix, v):
	prefix = prefix.upper()
	for k in dir(socket):
		if not k.startswith(prefix): continue
		if getattr(socket, k) == v: return k[len(prefix):]
	return v

def bin_pack(fmt, *args):
	'Extends struct.pack with "z" for auto-length bytes.'
	return struct.pack(fmt.replace('z', '{}s').format(
		*(len(s) for s in args if isinstance(s, bytes)) ), *args)

async def aio_wait_or_cancel(
		loop, task, timeout, default=..., cancel_suppress=None ):
	'Like asyncio.wait_for, but also awaits the task that it cancels.'
	if asyncio.iscoroutine(task): task = loop.create_task(task)
	try: return await asyncio.wait_for(task, timeout)
	except asyncio.TimeoutError:
		if default is ...:
			err = sys.exc_info()
			err = err[1].with_traceback(err[2])
		task.cancel()
		with contextlib.suppress(
			asyncio.CancelledError, *(cancel_suppress or list()) ): await task
		if default is ...: raise err from None
		else: return default

def retries_within_timeout( tries, timeout,
		backoff_func=lambda e,n: ((e**n-1)/e), slack=1e-2 ):
	'Return list of delays to make exactly n tires within timeout, with backoff_func.'
	a, b = 0, timeout
	while True:
		m = (a + b) / 2
		delays = list(backoff_func(m, n) for n in range(tries))
		error = sum(delays) - timeout
		if abs(error) < slack: return delays
		elif error > 0: b = m
		else: a = m


def derive_wg_key(path, ident, ident_auth, rounds):
	ident_key = hashlib.blake2s(
		to_bytes(ident), key=to_bytes(ident_auth) ).digest()
	if not path.exists():
		raise ValueError
		sp.run(
			['ssh-keygen', '-q', '-t', 'ed25519', '-N', '', '-C', f'wg-mux.{ident}', '-f', str(path)],
			check=True, stdin=sp.DEVNULL )
	ed25519_sk = ssh_key_parse(path)
	key = bytearray(hashlib.pbkdf2_hmac( 'sha512',
		password=ed25519_sk, salt=ident_key,
		iterations=rounds, dklen=len(ed25519_sk) ))
	key[0] &= 248
	key[31] = (key[31] & 127) | 64
	return b64_encode(key)

class SSHKeyError(Exception): pass

def ssh_key_parse(path):
	lines, key, done = path.read_text().splitlines(), list(), False
	for line in lines:
		if line == '-----END OPENSSH PRIVATE KEY-----': done = True
		if key and not done: key.append(line)
		if line == '-----BEGIN OPENSSH PRIVATE KEY-----':
			if done:
				raise SSHKeyError( 'More than one'
					f' private key detected in file, aborting: {path!r}' )
			assert not key
			key.append('')
	if not done: raise SSHKeyError(f'Incomplete or missing key in file: {path!r}')
	key_bytes = b64_decode(''.join(key))
	key = io.BytesIO(key_bytes)

	def key_read_bytes(src=None):
		if src is None: src = key
		n, = struct.unpack('>I', src.read(4))
		return src.read(n)

	def key_assert(chk, err, *fmt_args, **fmt_kws):
		if chk: return
		if fmt_args or fmt_kws: err = err.format(*fmt_args, **fmt_kws)
		err += f' [key file: {path!r}, decoded: {key_bytes!r}]'
		raise SSHKeyError(err)

	def key_assert_read(field, val, fixed=False):
		pos, chk = key.tell(), key.read(len(val)) if fixed else key_read_bytes()
		key_assert( chk == val, 'Failed to match key field'
			' {!r} (offset: {}) - expected {!r} got {!r}', field, pos, val, chk )

	key_assert_read('AUTH_MAGIC', b'openssh-key-v1\0', True)
	key_assert_read('ciphername', b'none')
	key_assert_read('kdfname', b'none')
	key_assert_read('kdfoptions', b'')
	(pubkey_count,), pubkeys = struct.unpack('>I', key.read(4)), list()
	for n in range(pubkey_count):
		line = key_read_bytes()
		key_assert(line, 'Empty public key #{}', n)
		line = io.BytesIO(line)
		key_t = key_read_bytes(line).decode()
		key_assert(key_t == 'ssh-ed25519', 'Unsupported pubkey type: {!r}', key_t)
		ed25519_pk = key_read_bytes(line)
		line = line.read()
		key_assert(not line, 'Garbage data after pubkey: {!r}', line)
		pubkeys.append(ed25519_pk)
	privkey = io.BytesIO(key_read_bytes())
	pos, tail = key.tell(), key.read()
	key_assert( not tail,
		'Garbage data after private key (offset: {}): {!r}', pos, tail )

	key = privkey
	n1, n2 = struct.unpack('>II', key.read(8))
	key_assert(n1 == n2, 'checkint values mismatch in private key spec: {!r} != {!r}', n1, n2)
	key_t = key_read_bytes().decode()
	key_assert(key_t == 'ssh-ed25519', 'Unsupported key type: {!r}', key_t)
	ed25519_pk = key_read_bytes()
	key_assert(ed25519_pk in pubkeys, 'Pubkey mismatch - {!r} not in {}', ed25519_pk, pubkeys)
	ed25519_sk = key_read_bytes()
	key_assert(
		len(ed25519_pk) == 32 and len(ed25519_sk) == 64,
		'Key length mismatch: {}/{} != 32/64', len(ed25519_pk), len(ed25519_sk) )
	comment = key_read_bytes()
	padding = key.read()
	padding, padding_chk = bytearray(padding), bytearray(range(1, len(padding) + 1))
	key_assert(padding == padding_chk, 'Invalid padding: {!r} != {!r}', padding, padding_chk)

	return ed25519_sk[:32]


class MuxClientProtocol:

	transport = None

	def __init__(self, loop):
		self.responses = asyncio.Queue(loop=loop)
		self.log = get_logger('mux-client.udp')

	def connection_made(self, transport):
		self.log.debug('Connection made')
		self.transport = transport

	def datagram_received(self, data, addr):
		self.log.debug('Received {:,d}B from {!r}', len(data), addr)
		self.responses.put_nowait(data)

	def error_received(self, err):
		self.log.debug('Network error: {}', err)

	def connection_lost(self, err):
		self.log.debug('Connection lost: {}', err or 'done')
		self.responses.put_nowait(None)


class AuthError(Exception): pass

def build_req(secret, ident, wg_key_pk):
	ident_buff, pk_buff = to_bytes(ident), b64_decode(wg_key_pk)
	salt, payload = os.urandom(8), bin_pack('>Bzz', len(ident_buff), ident_buff, pk_buff)
	mac = hashlib.blake2s(payload, key=to_bytes(secret), salt=salt).digest()
	return payload + salt + mac

def parse_res(secret, ident, res):
	if not res: return
	try:
		fmt = 'BBHB{}s{}s'.format(res[0], {4: 4, 6: 16}[res[1]])
		( ident_len, ip_len, wg_port, wg_mask, ident_buff,
			wg_addr, salt, mac ) = struct.unpack(fmt + '8s32s', res)
		mac_chk = hashlib.blake2s(
			res[:struct.calcsize(fmt)], key=to_bytes(secret), salt=salt ).digest()
		if not secrets.compare_digest(mac, mac_chk): raise AuthError('MAC mismatch')
	except (KeyError, struct.error, AuthError) as err:
		log.debug('Failed to parse/auth response value: {}', err)
		return
	wg_addr = ipaddress.ip_address(wg_addr)
	wg_net = f'{wg_addr}/{wg_mask}'
	return wg_addr, wg_net, wg_port


async def mux_negotiate(
		loop, secret, ident, wg_key_pk,
		sock_af, sock_p, host, port, delays ):
	req = build_req(secret, ident, wg_key_pk)
	transport = proto = None
	try:
		for delay in delays + [2**30]:
			deadline = loop.time() + delay
			if not transport:
				transport, proto = await loop.create_datagram_endpoint(
					lambda: MuxClientProtocol(loop), remote_addr=(host, port), family=sock_af, proto=sock_p )
				transport.sendto(req)
			if delay:
				while True:
					try:
						response = await aio_wait_or_cancel( loop,
							proto.responses.get(), max(0, deadline - loop.time()) )
					except asyncio.TimeoutError: break
					if response is None:
						transport = proto = None
						break
					response = parse_res(secret, ident, response)
					if response: return response
				if transport: transport.sendto(req)
				await asyncio.sleep(max(0, deadline - loop.time()), loop=loop)
	finally:
		if transport: transport.close()


def main(args=None, conf=None):
	if not conf: conf = WGMuxConfig()

	import argparse
	parser = argparse.ArgumentParser(
		description='Wrapper for "wg set" to derive key from (auto-generated if missing)'
			' default ed25519 ssh key and query wg tunnel IP to use from server'
			' (based on some unique id), substituting all that into resulting command.')

	group = parser.add_argument_group('Mux server')
	group.add_argument('host',
		help='Host or address (to be resolved via gai) or a host[:port] spec.'
			' "port" will be used for -m/--mux-port option, if specified here.')
	group.add_argument('pubkey', help='Base64-encoded WireGuard server public key.')
	group.add_argument('-m', '--mux-port',
		default=conf.mux_port, type=int, metavar='port',
		help='Remote UDP port on which corresponding'
				' mux-server script is listening on (default: %(default)s).'
			' Can also be specified in the "host" argument, which overrides this option.')

	group = parser.add_argument_group('Auth/ident options')
	group.add_argument('-s', '--auth-secret',
		default=conf.auth_secret, metavar='string',
		help='Any string to use as symmetric secret'
				' to authenticate both sides on --mux-port (default: %(default)s).'
			' Must be same for both mux-client and server scripts talking to each other.')
	group.add_argument('-i', '--ident-string',
		metavar='string',
		help='Any string to use as this node identity -'
				' i.e. serial number, mac/hw address, machine-id, etc.'
			' Hash of /etc/machine-id contents is used, if not specified.'
			' Overrides any other --ident-* option.')
	group.add_argument('--ident-rpi', action='store_true',
		help='Use hash of "Serial" from /proc/cpuinfo as ident.'
			' Only available on Raspberry Pi boards.')
	group.add_argument('--ident-cmd',
		metavar='shell-cmd',
		help='Shell command to run to get ident string on stdout.'
			' Must exit with code 0, otherwise script will abort.'
			' Resulting string be stripped of spaces, otherwise sent as-is,'
				' so should be hashed in the command if necessary.')

	group = parser.add_argument_group('WireGuard options')
	group.add_argument('--wg-iface', metavar='iface', default=conf.wg_iface,
		help='WireGuard interface name to configure. Default: %(default)s')
	group.add_argument('--wg-port', type=int, metavar='port',
		help='Remote WireGuard port to use. Default is to use one returned by mux-server.')
	group.add_argument('--wg-psk', metavar='file',
		help='File with base64-encoded WireGuard pre-shared-secret key to use for connection.')
	group.add_argument('--wg-net', metavar='ip/mask', default='0.0.0.0/0',
		help='IP/mask network spec to check returned address against or map to.'
			' This is required if mux-server is configured to only return last IP octet.')
	group.add_argument('--wg-keepalive', metavar='seconds', default=conf.wg_keepalive,
		help='WireGuard keepalive interval. Default: %(default)s')
	group.add_argument('-c', '--wg-cmd', metavar='cmd', default='wg',
		help='"wg" command to run, split on spaces.'
			' Use e.g. "sudo wg" to have it run via sudo or full path'
				' for a special binary with suid/capabilities. Default: %(default)s')

	group = parser.add_argument_group('Misc options')
	group.add_argument('-n', '--attempts',
		type=int, metavar='n', default=conf.mux_attempts,
		help='Number of UDP packets to send to'
			' --mux-port (to offset packet loss). Default: %(default)s')
	group.add_argument('-t', '--timeout',
		type=float, metavar='seconds', default=conf.mux_timeout,
		help='Negotiation response timeout on --mux-port, in seconds. Default: %(default)ss')
	group.add_argument('--dry-run', action='store_true',
		help='Do not change WireGuard configuration, only pretend to.'
			' Still generates ssh keys however.')
	group.add_argument('--debug', action='store_true', help='Verbose operation mode.')

	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	logging.basicConfig(level=logging.DEBUG if opts.debug else logging.WARNING)

	ident = opts.ident_string
	if not ident:
		if opts.ident_rpi:
			import re
			with open('/proc/cpuinfo') as src:
				for line in src:
					m = re.search(r'^\s*Serial\s*:\s*(\S+)\s*$', line)
					if m: break
				else: parser.error('Failed to find "Serial : ..." line in /proc/cpuinfo (non-RPi kernel?)')
				ident = hashlib.blake2s(m.group(1).encode(), key=to_bytes(opts.auth_secret)).digest()
		elif opts.ident_cmd:
			res = subprocess.run(opts.ident_cmd, shell=True, check=True, stdout=subprocess.PIPE)
			ident = res.stdout.decode().strip()
		else:
			with open('/etc/machine-id', 'rb') as src:
				ident = hashlib.blake2s(src.read(), key=to_bytes(opts.auth_secret)).digest()

	host, port_mux, family = opts.host, opts.mux_port, 0
	if host.count(':') > 1: host, port_mux = str_part(host, ']:>', port_mux)
	else: host, port_mux = str_part(host, ':>', port_mux)
	if '[' in host: family = socket.AF_INET6
	host, port_mux = host.strip('[]'), int(port_mux)
	try:
		addrinfo = socket.getaddrinfo( host, str(port_mux),
			family=family, type=socket.SOCK_DGRAM, proto=socket.IPPROTO_UDP )
		if not addrinfo: raise socket.gaierror(f'No addrinfo for host: {host}')
	except (socket.gaierror, socket.error) as err:
		parser.error( 'Failed to resolve socket parameters'
			' via getaddrinfo: {!r} - {}'.format((host, port_mux), err_fmt(err)) )
	sock_af, sock_t, sock_p, _, sock_addr = addrinfo[0]
	log.debug(
		'Resolved mux host:port {!r}:{!r} to endpoint: {} (family: {}, type: {}, proto: {})',
		host, port_mux, sock_addr,
		*(sockopt_resolve(pre, n) for pre, n in [
			('af_', sock_af), ('sock_', sock_t), ('ipproto_', sock_p) ]) )
	host, port_mux = sock_addr[:2]

	wg_cmd = opts.wg_cmd.split()
	wg_addr_net = ipaddress.ip_network(opts.wg_net)
	wg_pk = opts.pubkey

	wg_key = derive_wg_key(
		pl.Path(conf.key_source_ssh).expanduser(),
		ident, opts.auth_secret, conf.key_pbkdf2_rounds )
	wg_key_pk = sp.run( wg_cmd + ['pubkey'], check=True,
		input=wg_key.encode(), stdout=sp.PIPE ).stdout.decode().strip()

	retry_delays = retries_within_timeout(opts.attempts+1, opts.timeout)[:-1]
	with contextlib.closing(asyncio.get_event_loop()) as loop:
		muxer = loop.create_task(mux_negotiate(
			loop, opts.auth_secret, ident, wg_key_pk,
			sock_af, sock_p, host, port_mux, retry_delays ))
		for sig in 'INT TERM'.split():
			loop.add_signal_handler(getattr(signal, f'SIG{sig}'), muxer.cancel)
		try:
			wg_addr, wg_mask, wg_port = loop.run_until_complete(
				aio_wait_or_cancel(loop, muxer, opts.timeout) )
		except (asyncio.CancelledError, asyncio.TimeoutError) as err:
			log.debug('mux_negotiate cancelled: {}', err_fmt(err))
			return

	if opts.wg_port: wg_port = opts.wg_port
	if not wg_addr_net and not wg_net:
		print( 'ERROR: mux-server returned address'
			' without network, and no --wg-net is specified', file=sys.stderr )
		return 1
	elif wg_addr_net:
		if isinstance(wg_addr, int): wg_addr = wg_addr_net[wg_addr]
		elif wg_addr not in wg_addr_net:
			print( 'ERROR: mux-server returned address'
				f' outside of specified --wg-net: {wg_addr}', file=sys.stderr )
			return 1
		wg_net = wg_addr_net
	wg_psk = '' if not opts.wg_psk else f'PresharedKey = {wg_psk}\n'
	wg_ep = f'{host}:{wg_port}'

	log.debug( 'Negotiated wg params:'
		' ep={} addr={} pubkey={}', wg_ep, wg_addr, wg_pk )
	wg_conf = dedent(f'''
		[Interface]
		Address = {wg_addr}
		PrivateKey = {wg_key}

		[Peer]
		PublicKey = {wg_pk}
		AllowedIPs = {wg_net}
		Endpoint = {wg_ep}
		PersistentKeepalive = {opts.wg_keepalive}
		{wg_psk}''')
	if not opts.dry_run:
		sp.run(wg_cmd + [ 'set', opts.wg_iface,
			'peer', wg_pk, 'remove' ], stderr=sp.DEVNULL)
		sp.run(wg_cmd + ['setconf', opts.wg_iface,
			'/dev/stdin' ], check=True, input=wg_conf.encode())
	else:
		log.debug('Config for wg: {}', ' '.join(
			(line.replace(' ', '') or '//') for line in wg_conf.splitlines() ))

if __name__ == '__main__': sys.exit(main())
