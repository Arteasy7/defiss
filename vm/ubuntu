#!/bin/bash

script_info='Ubuntu VM, installed to virtio-fs.'


### Management

root=/mnt/volatiles/vms
dst="$root"/ubuntu/live.dump
telnet_port=8201
vde_mac=52:54:00:12:34:61
vde_path=~/tmp/vde
dump_inc=
restore=
net_only=
img=ubuntu/install.qcow2
video=( -nographic )
uid_root=

[[ "$1" = -r || "$1" = --root ]] && { uid_root=t; shift; }
[[ "$1" = -i || "$1" = --img ]] && { img=$(realpath "$2"); shift; shift; }

[[ "$1" = -g || "$1" = --graphic ]] && {
	video=( -vga std )
	# video+=( -display gtk )
	# video+=( -display vnc 0 )
	shift
}

[[ "$UID" -ne 0 || -n "$uid_root" ]] \
	|| { echo >&2 "ERROR: running as uid=0 but no -r/--root specified"; exit 1; }

case "$1" in
	d|dump)
		[[ "$2" = -i ]] && { dump_inc=-i; shift; }
		[[ -n "$2" ]] && {
			touch "$2" || exit 1
			dst=$(realpath "$2")
		}
		echo "Dumping to: $dst"
		ncat -t 127.0.0.1 "$telnet_port" <<EOF
stop
migrate_set_speed 4g
migrate -d $dump_inc "exec:lzop -c > $dst"
EOF
		echo
		while :; do
			echo 'info migrate' | ncat -t 127.0.0.1 "$telnet_port" |
				grep -aq '^Migration status:[[:space:]]*completed[[:space:]]*$'
			pipe=( "${PIPESTATUS[@]}" )
			[[ ${pipe[0]} -ne 0 || ${pipe[1]} -ne 0 ]] && exit 1
			[[ ${pipe[2]} -eq 0 ]] && {
				echo 'quit' | ncat -t 127.0.0.1 "$telnet_port"
				echo "Done"
				ls -lah "$dst"
				exit 0
			}
			sleep 1 || exit 1
		done ;;

	r|restore)
		[[ -n "$2" ]] && dst=$2
		echo "Restoring from: $dst"
		[[ -f "$dst" ]] || { echo >&2 "FIle not found: $dst"; exit 1; }
		restore=t ;;

	m|monitor) exec rlwrap ncat -t 127.0.0.1 "$telnet_port" ;;
	n|net|net-only) net_only=t ;;

	'') ;;
	*)
		echo >&2 "Usage: $0 [-r|--root] [ {-i|--img} basename] [-g|--graphic] \\"
		echo >&2 "  [ { d | dump } [path] | { r | restore } [-i] [path] | { m | monitor } | { n | net-only } ]"
		cat >&2 <<EOF

$script_info

Cheatsheet for qemu-img:
  qemu-img create -f qcow2 install.qcow2 10G
  qemu-img create -b install.qcow2 -f qcow2 install.qcow2.inc
  qemu-img commit install.qcow2.inc && rm install.qcow2.inc

nbd for initial install:
  modprobe nbd
  qemu-nbd -c /dev/nbd0 install.qcow2
  fsck -a /dev/nbd0p1
  mount /dev/nbd0p1 /mnt/nbd
  ...
  umount /mnt/nbd
  qemu-nbd -d /dev/nbd0

virtiofs in initramfs:
  echo virtiofs >> /etc/initramfs-tools/modules
  update-initramfs -k all -c

fstab:
  : > /etc/fstab
  rm /swapfile

EOF
		exit 1 ;;
esac

cd "$root"


### Too slow otherwise

err=0
modprobe kvm || exit 1
modprobe kvm-intel 2>/dev/null || (( err += 1 ))
modprobe kvm-amd 2>/dev/null || (( err += 1 ))
[[ "$err" -lt 2 ]] || { echo >&2 "ERROR: failed to load kvm intel/amd modules"; exit 1; }


### VDE

pid1=$$ pid2=$$
mkdir -p "$vde_path"

cgrc -rcu vde && {
	cgrc -ru vde apps-vm -- vde_switch \
		-s "$vde_path"/link.sock -M "$vde_path"/mgmt.sock &
	pid1=$!; }

for n in {0..50}; do
	[[ -e "$vde_path"/link.sock ]] && break
	sleep 0.1
done
[[ $n -lt 50 ]] || { echo >&2 "ERROR: vde switch startup failed"; exit 1; }

cgrc -rcu vde-tap && {
	cgrc -ru vde-tap apps-vm -- sudo vde_plug2tap \
		-s "$vde_path"/link.sock vde &
	pid2=$!; }

# Add a little delay if vde stuff is just starting
kill -0 "$pid1" "$pid2" || { echo >&2 "ERROR: vde failed to start"; exit 1; }
for n in {0..5}; do
	err=t; ip link show vde &>/dev/null && { err=; break; }
	sleep 0.1
done
[[ -z "$err" ]] || { echo >&2 "ERROR: vde failed to start (no iface)"; exit 1; }

[[ -n "$net_only" ]] && exit 0


### virtiofsd daemon - has to run as root
# uid=root is to allow access to local uid=root files

# /usr/lib/qemu/virtiofsd -f \
#  -o source=/mnt/volatiles/vms/ubuntu/fs \
#  --socket-path=/mnt/volatiles/vms/ubuntu/fs.sock \
#  -o cache=always -o writeback -o flock -o xattr &
# chmod 666 /mnt/volatiles/vms/ubuntu/fs.sock


### Run qemu

qemu_opts=(
	-name "$(basename "$0")"

	-m 4096M
	-rtc base=utc,clock=host
	-monitor telnet:127.0.0.1:${telnet_port},server,nowait
	-usb -device usb-kbd -device usb-mouse
	-net nic,macaddr=${vde_mac},id=vde
	-net vde,sock="$vde_path"/link.sock
	-k en-us

	-enable-kvm
	-cpu host
	-smp 2
	"${video[@]}"

	# -device usb-ehci,id=usb,bus=pci.0,addr=0x4
	# -device usb-host,hostbus=1,hostaddr=3

	# access to these: chmod a+r /mnt/volatiles/vms/ubuntu/fs/boot/*
	-kernel ubuntu/fs/boot/vmlinuz
	-initrd ubuntu/fs/boot/initrd.img
	-append 'root=vio-root rootfstype=virtiofs rw quiet splash'

	-chardev socket,id=vfs-root,path=/mnt/volatiles/vms/ubuntu/fs.sock
	-device vhost-user-fs-pci,queue-size=1024,chardev=vfs-root,tag=vio-root
	-object memory-backend-file,id=vfs-mem,size=4G,mem-path=/dev/shm,share=on
	-numa node,memdev=vfs-mem

	## Install:
	# -drive file="$img",if=virtio,aio=native,cache=writeback,cache.direct=on
	# -cdrom ubuntu/ubuntu-mate-19.10-desktop-amd64.iso
	# -cdrom ubuntu/ubuntu-18.04-desktop-amd64.iso
)

ulimit -c 0
export QEMU_AUDIO_DRV=none

[[ -n "$restore" ]] && qemu_opts+=( -incoming "exec:bsdcat $dst" )

exec cgrc -ru qemu-ubuntu apps-vm -- qemu-system-x86_64 "${qemu_opts[@]}"
