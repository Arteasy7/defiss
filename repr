#!/usr/bin/env python3

import os, sys


def main(args=None):
	import argparse
	parser = argparse.ArgumentParser(
		description='Run python repr() to stdout on every (text) line of an input file.')
	parser.add_argument('file', nargs='*',
		help='Input file path(s). Stdin is used if none specified or in place of "-".')
	parser.add_argument('-b', '--binary', action='store_true',
		help='Process file lines in binary mode, instead of decoding it with utf-8.'
			' Should allow to see BOM and random'
				' binary goop escaped as individual bytes, not codepoints.')
	parser.add_argument('-n', '--hide-newlines', action='store_true',
		help='Enables "universal newlines" translation and strips last \\n from each line.'
			' Whether this is sufficient for mismatched line endings'
				' depends on how aggressive that mode is in converting newlines.')
	opts = parser.parse_args(sys.argv[1:] if args is None else args)

	file_list = opts.file
	if not file_list: file_list = ['-']
	file_mode = 'r' if not opts.binary else 'rb'
	file_nl = ('' if not opts.hide_newlines else None) if not opts.binary else None
	repr_start = 1 if not opts.binary else 2 # b'' vs ''
	line_end_hide = ('\n' if not opts.binary else b'\n') if opts.hide_newlines else None

	newline='' if not opts.hide_newlines else None

	for p in file_list:
		with open(p if p != '-' else sys.stdin.fileno(), mode=file_mode, newline=file_nl) as src:
			for line in src:
				if line_end_hide and line.endswith(line_end_hide): line = line[:-1]
				print(repr(line)[repr_start:-1])

if __name__ == '__main__': sys.exit(main())
